// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	//// Replace this comment with your code.

    // Since load has to be carefully directed between
    // the RAM address range (0 to 16383) (14 bits) and 
    // the screen (16384 to 24575) (15) bits we use the 
    // most significant bit to decide
    DMux(in=load, sel=address[14], a=loadRAM, b=loadScreen);

    // The RAM address range does not need the most significant bit
    RAM16K(in=in, load=loadRAM, address=address[0..13], out=outRAM);

    // Now Screen will only be loaded if the first bit is 1
    // which corresponds to 16384, after that we dont care about the 
    // two most significant bits because address[14] is already 1 
    // we just need specifics to a certain register
    Screen(in=in, load=loadScreen, address=address[0..12], out=outScreen);
    
    // Keyboard is always updated
    Keyboard(out=outKeyboard);

    // Now if its 
    // 00 -> the address range is within RAM
    // 01 -> still within the 14 bit RAM range
    // 10 -> now we are in the Screen range
    // 11 -> is past the (16384 - 24575) Screen range now its the Keyboard (24576)
    Mux4Way16(a=outRAM, b=outRAM, c=outScreen, d=outKeyboard, sel=address[13..14], out=out);
}