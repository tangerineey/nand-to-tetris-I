// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
    // Determine what type of instruction we are dealing with
    Not(in=instruction[15], out=Ainst);
    Not(in=Ainst, out=Cinst);

    // Decide between A inst (directly to reg A) or C inst (if dest is set to A) for input
    Mux16(a=instruction, b=aluOut, sel=Cinst, out=regAInput);
    
    // Register A
    And(a=Cinst, b=instruction[5], out=d1);
    Or(a=Ainst, b=d1, out=loadA);
    ARegister(in=regAInput, load=loadA, out=regAOutput, out[0..14]=addressM);    
    
    // Use "a" bit to determine Reg A or Memory[A] as second input 
    And(a=Cinst, b=instruction[12], out=a);
    Mux16(a=regAOutput, b=inM, sel=a, out=AorM);

    // Register D
    And(a=Cinst, b=instruction[4], out=d2);
    DRegister(in=aluOut, load=d2, out=regDOutput);

    // Since only a C inst can affect  the ALU no need for checking
    // The order of the input values is very specific
    ALU(
    x=regDOutput, y=AorM, zx=instruction[11], nx=instruction[10], 
    zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
    out=aluOut, out=outM, zr=zr, ng=ng);

    // If we want to "write" to Memory[A]
    // "out=d3" is included ONLY for testing can be removed
    And(a=Cinst, b=instruction[3], out=writeM);

    // Jumps
    // We first need to get a flag for "j3"
    Not(in=zr, out=notZero);
    Not(in=ng, out=notNeg);
    And(a=notZero, b=notNeg, out=pos);

    // If the corresponding flag is set and the result is correct
    And(a=instruction[2], b=ng, out=jNeg);
    And(a=instruction[1], b=zr, out=jZer);
    And(a=instruction[0], b=pos, out=jPos);

    // Then we just check if any of those flags are true
    Or(a=jNeg, b=jZer, out=jNegZer);
    Or(a=jNegZer, b= jPos, out=shouldJump);

    // And the instruction is C, A instructions cannot dictate jumps
    And(a=Cinst, b=shouldJump, out=jump);

    // The program counter is always incrementing
    PC(in=regAOutput, load=jump, inc=true, reset=reset, out[0..14]=pc);
}